// Inicialização após o carregamento do DOM para Física
document.addEventListener("DOMContentLoaded", function () {
  const formulaFisica = document.getElementById("formula_fisica");

  if (formulaFisica) {
    // Adicionar listener para mudança de fórmula
    formulaFisica.addEventListener("change", updateVariablesFisica);
    console.log("Elemento formula_fisica encontrado e listener adicionado.");
  } else {
    console.error('Elemento com id "formula_fisica" não encontrado.');
  }

  // Adicionar MathJax para renderizar fórmulas LaTeX após o carregamento
  const script = document.createElement("script");
  script.src = "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"; // URL correta para o MathJax 3
  script.async = true;
  document.head.appendChild(script);

  script.onload = () => {
    console.log("MathJax carregado com sucesso.");
    // Configurar MathJax para renderizar fórmulas LaTeX
    window.MathJax = {
      tex: {
        inlineMath: [
          ["$", "$"],
          ["\\(", "\\)"],
        ],
        displayMath: [
          ["$$", "$$"],
          ["\\[", "\\]"],
        ],
      },
      svg: {
        fontCache: "global",
      },
    };

    // Reprocessa MathJax para garantir que as fórmulas LaTeX já existentes sejam renderizadas corretamente
    MathJax.typesetPromise()
      .then(() => {
        console.log("MathJax reprocessado com sucesso.");
      })
      .catch(function (err) {
        console.error("Erro ao processar fórmulas MathJax:", err);
      });
  };
});

function reprocessMathJax() {
  if (window.MathJax) {
    console.log("Reprocessando MathJax...");
    MathJax.typesetPromise()
      .then(() => {
        console.log(
          "MathJax reprocessado com sucesso dentro de reprocessMathJax."
        );
      })
      .catch(function (err) {
        console.error(
          "Erro ao reprocessar MathJax dentro de reprocessMathJax:",
          err
        );
      });
  } else {
    console.error("MathJax não foi carregado.");
  }
}

// Função para atualizar as variáveis e fórmulas com base na fórmula selecionada
function updateVariablesFisica() {
  const formula = document.getElementById("formula_fisica").value;
  const container = document.getElementById("variables-container_fisica");
  const formulaDisplay = document.getElementById("fisica-formula-display");

  // Limpar conteúdo anterior
  container.innerHTML = "";
  formulaDisplay.innerHTML = "";

  let variables = [];
  let formulaHtml = "";
  let unidades = [];

  // Definir variáveis e fórmulas com base na fórmula selecionada
  switch (formula) {
    case "velocidade":
      formulaHtml = "\\( v = \\frac{d}{t} \\)";
      variables = ["Distância", "Tempo"];
      unidades = ["m", "s"];
      break;
    case "trabalho":
      formulaHtml = "\\( T = F \\cdot d \\)";
      variables = ["Força", "Distância"];
      unidades = ["N", "m"];
      break;
    case "forca":
      formulaHtml = "\\( F = m \\cdot a \\)";
      variables = ["Massa", "Aceleração"];
      unidades = ["kg", "m/s²"];
      break;
    case "energia-cinetica":
      formulaHtml = "\\( E_c = \\frac{1}{2} \\cdot m \\cdot v^2 \\)";
      variables = ["Massa", "Velocidade"];
      unidades = ["kg", "m/s"];
      break;
    case "impulso":
      formulaHtml = "\\( I = F \\cdot t \\)";
      variables = ["Força", "Tempo"];
      unidades = ["N", "s"];
      break;
    case "potencia":
      formulaHtml = "\\( P = \\frac{T}{t} \\)";
      variables = ["Trabalho", "Tempo"];
      unidades = ["J", "s"];
      break;
        case "aceleracao":
      formulaHtml = "\\( a = \\frac{v_f - v_i}{t} \\)";
      variables = ["Velocidade final", "Velocidade inicial", "Tempo"];
      unidades = ["m/s", "m/s", "s"];
      break;
    case "momento-linear":
      formulaHtml = "\\( p = m \\cdot v \\)";
      variables = ["Massa", "Velocidade"];
      unidades = ["kg", "m/s"];
      break;
    case "pressao":
      formulaHtml = "\\( P = \\frac{F}{A} \\)";
      variables = ["Força", "Área"];
      unidades = ["N", "m²"];
      break;
    case "frequencia-ondas":
      formulaHtml = "\\( f = \\frac{v}{\\lambda} \\)";
      variables = ["Velocidade", "Comprimento de onda"];
      unidades = ["m/s", "m"];
      break;
    case "lei-hooke":
      formulaHtml = "\\( F = k \\cdot x \\)";
      variables = ["Constante Elástica", "Deformação"];
      unidades = ["N/m", "m"];
      break;
    case "resistencia-eletrica":
      formulaHtml = "\\( R = \\frac{V}{I} \\)";
      variables = ["Tensão", "Corrente"];
      unidades = ["V", "A"];
      break;
    case "energia-mecanica":
      formulaHtml = "\\( E_m = E_c + E_p \\)";
      variables = ["Energia Cinética", "Energia Potencial"];
      unidades = ["J", "J"];
      break;
    case "lei-gravitacao":
      formulaHtml = "\\( F = G \\cdot \\frac{m_1 \\cdot m_2}{r^2} \\)";
      variables = ["Massa 1", "Massa 2", "Distância"];
      unidades = ["kg", "kg", "m"];
      break;
    case "energia-pot-gravitacional":
      formulaHtml = "\\( E_p = m \\cdot g \\cdot h \\)";
      variables = ["Massa", "Gravidade", "Altura"];
      unidades = ["kg", "m/s²", "m"];
      break;
    case "energia-pot-elastica":
      formulaHtml = "\\( E_p = \\frac{1}{2} \\cdot k \\cdot x^2 \\)";
      variables = ["Constante Elástica", "Deformação"];
      unidades = ["N/m", "m"];
      break;
    case "capacitancia":
      formulaHtml = "\\( C = \\frac{Q}{V} \\)";
      variables = ["Carga", "Tensão"];
      unidades = ["C", "V"];
      break;
    case "energia-einstein":
      formulaHtml = "\\( E = m \\cdot c^2 \\)";
      variables = ["Massa"];
      unidades = ["kg"];
      break;
    case "velocidade-onda":
      formulaHtml = "\\( v = \\sqrt{\\frac{T}{\\mu}} \\)";
      variables = ["Tensão", "Densidade Linear"];
      unidades = ["N/m", "kg/m"];
      break;
    default:
      formulaHtml = "Selecione uma fórmula válida";
      variables = [];
      unidades = [];
  }

  // Atualiza a exibição da fórmula LaTeX
  formulaDisplay.innerHTML = `<strong>Fórmula:</strong> ${formulaHtml}`;

  // Verifica se foi selecionada uma fórmula válida
  if (variables.length === 0) {
    container.innerHTML =
      "<p>Por favor, selecione uma fórmula para continuar.</p>";
    return;
  }

  // Gerar campos de entrada de variáveis e unidades
  container.innerHTML = variables
    .map(
      (variable, index) =>
        `<div style="padding: 10px; border-bottom: 1px solid #ccc; display: flex; align-items: center;">
            <label for="var${index}" style="flex: 1;">${variable}</label>
            <input type="number" id="var${index}" placeholder="${variable}" step="any" style="flex: 2; margin-right: 10px;">
            <span style="flex: 0.5;">${unidades[index]}</span>
        </div>`
    )
    .join("");

  // Reprocessar MathJax para exibir a fórmula corretamente
   if (window.MathJax) {
    console.log("Reprocessando MathJax para exibir a fórmula...");
    MathJax.typesetPromise().catch(function (err) {
      console.error("Erro ao renderizar MathJax:", err);
    });
  } else {
    console.error("MathJax não foi carregado corretamente.");
  }
}

// Função para obter as unidades para cada variável
function getUnidades(variable) {
  switch (variable) {
    case "Distância":
      return `
        <option value="m">m</option>
        <option value="cm">cm</option>
        <option value="dm">dm</option>
        <option value="mm">mm</option>
        <option value="km">km</option>
        <option value="mi">milha</option>
        <option value="in">polegada</option>
        <option value="ft">pé</option>
        <option value="yd">jarda</option>
      `;
    case "Tempo":
      return `
        <option value="s">s</option>
        <option value="min">min</option>
        <option value="h">h</option>
        <option value="d">dia</option>
        <option value="ms">ms</option>
        <option value="μs">μs</option>
        <option value="ns">ns</option>
      `;
    case "Força":
      return `
        <option value="N">N</option>
        <option value="kN">kN</option>
        <option value="mN">mN</option>
        <option value="μN">μN</option>
        <option value="lbf">lbf</option>
        <option value="ozf">ozf</option>
      `;
    case "Massa":
      return `
        <option value="kg">kg</option>
        <option value="g">g</option>
        <option value="mg">mg</option>
        <option value="μg">μg</option>
        <option value="lb">libra</option>
        <option value="oz">onça</option>
      `;
    case "Aceleração":
      return `
        <option value="m/s²">m/s²</option>
        <option value="cm/s²">cm/s²</option>
        <option value="dm/s²">dm/s²</option>
        <option value="mm/s²">mm/s²</option>
        <option value="g">g</option>
      `;
    case "Trabalho":
    case "Energia":
      return `
        <option value="J">J</option>
        <option value="kJ">kJ</option>
        <option value="mJ">mJ</option>
        <option value="μJ">μJ</option>
        <option value="cal">cal</option>
        <option value="kcal">kcal</option>
      `;
    case "Potência":
      return `
        <option value="W">W</option>
        <option value="kW">kW</option>
        <option value="mW">mW</option>
        <option value="μW">μW</option>
        <option value="hp">hp</option>
      `;
    case "Pressão":
      return `
        <option value="Pa">Pa</option>
        <option value="kPa">kPa</option>
        <option value="mPa">mPa</option>
        <option value="μPa">μPa</option>
        <option value="atm">atm</option>
        <option value="bar">bar</option>
      `;
    case "Frequência":
      return `
        <option value="Hz">Hz</option>
        <option value="kHz">kHz</option>
        <option value="MHz">MHz</option>
        <option value="GHz">GHz</option>
      `;
    case "Velocidade":
      return `
        <option value="m/s">m/s</option>
        <option value="km/h">km/h</option>
        <option value="mph">mph</option>
        <option value="ft/s">ft/s</option>
      `;
    case "Comprimento de onda":
      return `
        <option value="m">m</option>
        <option value="cm">cm</option>
        <option value="nm">nm</option>
        <option value="µm">µm</option>
      `;
        case "Tensão":
      return `
        <option value="V">V</option>
        <option value="kV">kV</option>
        <option value="mV">mV</option>
        <option value="μV">μV</option>
      `;
    case "Corrente":
      return `
        <option value="A">A</option>
        <option value="mA">mA</option>
        <option value="μA">μA</option>
      `;
    case "Área":
      return `
        <option value="m²">m²</option>
        <option value="cm²">cm²</option>
        <option value="km²">km²</option>
        <option value="ft²">ft²</option>
        <option value="in²">in²</option>
      `;
    case "Deformação":
      return `
        <option value="m">m</option>
        <option value="cm">cm</option>
        <option value="mm">mm</option>
      `;
    case "Carga":
      return `
        <option value="C">C</option>
        <option value="mC">mC</option>
        <option value="μC">μC</option>
        <option value="nC">nC</option>
      `;
    case "Constante Elástica":
      return `
        <option value="N/m">N/m</option>
      `;
    default:
      return `<option value="">Selecione uma unidade</option>`;
  }
}

// Função de cálculo para Física
function calcularFisica() {
  const formula = document.getElementById("formula_fisica").value;
  const container = document.getElementById("variables-container_fisica");
  const inputs = container.querySelectorAll("input");
  const unidades = container.querySelectorAll("select");

  // Obter os valores e unidades das variáveis
  const variables = Array.from(inputs).map((input, index) => {
    const unidade = unidades[index].value;
    const valor = parseFloat(input.value.trim());
    if (isNaN(valor)) {
      console.error(`Valor inválido para a variável na posição ${index}.`);
      return { valor: 0, unidade };
    }
    return { valor, unidade };
  });

  // Converter unidades para Sistema Internacional (SI)
  variables.forEach((variable, index) => {
    variables[index].valor = converterParaSI(variable.valor, variable.unidade);
  });

  let resultado;
  switch (formula) {
    case "velocidade":
      resultado = calcularVelocidadeMedia(variables);
      break;
    case "trabalho":
      resultado = calcularTrabalho(variables);
      break;
    case "forca":
      resultado = calcularForca(variables);
      break;
    case "energia-cinetica":
      resultado = calcularEnergiaCinetica(variables);
      break;
    case "impulso":
      resultado = calcularImpulso(variables);
      break;
    case "potencia":
      resultado = calcularPotencia(variables);
      break;
    case "aceleracao":
      resultado = calcularAceleracao(variables);
      break;
    case "momento-linear":
      resultado = calcularMomentoLinear(variables);
      break;
    case "pressao":
      resultado = calcularPressao(variables);
      break;
    case "frequencia-ondas":
      resultado = calcularFrequenciaOndas(variables);
      break;
    case "lei-hooke":
      resultado = calcularLeiHooke(variables);
      break;
    case "resistencia-eletrica":
      resultado = calcularResistenciaEletrica(variables);
      break;
    case "energia-mecanica":
      resultado = calcularEnergiaMecanica(variables);
      break;
    case "lei-gravitacao":
      resultado = calcularLeiGravitacao(variables);
      break;
    case "energia-pot-gravitacional":
      resultado = calcularEnergiaPotencialGravitacional(variables);
      break;
    case "energia-pot-elastica":
      resultado = calcularEnergiaPotencialElastica(variables);
      break;
    case "capacitancia":
      resultado = calcularCapacitancia(variables);
      break;
    case "energia-einstein":
      resultado = calcularEinsteinEnergia(variables);
      break;
    case "velocidade-onda":
      resultado = calcularVelocidadeOnda(variables);
      break;
    default:
      console.error("Fórmula não reconhecida.");
      return;
  }

    if (isNaN(resultado)) {
    console.error("Erro ao calcular resultado.");
    return;
  }

  const unidadeResultado = getUnidadeResultado(formula);
  const resultadoExibicao = resultado.toFixed(2) + " " + unidadeResultado;

  document.getElementById("resultado_fisica").innerHTML = resultadoExibicao;
}

// Função para converter unidades para Sistema Internacional (SI)
function converterParaSI(valor, unidade) {
  switch (unidade) {
    case "m":
      return valor;
    case "cm":
      return valor / 100;
    case "mm":
      return valor / 1000;
    case "km":
      return valor * 1000;
    // ... outros casos de conversão de unidade
    default:
      console.error(`Unidade não reconhecida: ${unidade}`);
      return valor;
  }
}

// Função para obter a unidade de resultado correta
function getUnidadeResultado(formula) {
  switch (formula) {
    case "velocidade":
      return "m/s";
    case "trabalho":
      return "J";
    case "forca":
      return "N";
    case "energia-cinetica":
      return "J";
    case "impulso":
      return "Ns";
    case "potencia":
      return "W";
    case "aceleracao":
      return "m/s²";
    case "momento-linear":
      return "kg·m/s";
    case "pressao":
      return "Pa";
    case "frequencia-ondas":
      return "Hz";
    case "lei-hooke":
      return "N/m";
    case "resistencia-eletrica":
      return "Ω";
    case "energia-mecanica":
      return "J";
    case "lei-gravitacao":
      return "N";
    case "energia-pot-gravitacional":
      return "J";
    case "energia-pot-elastica":
      return "J";
    case "capacitancia":
      return "F";
    case "energia-einstein":
      return "J";
    case "velocidade-onda":
      return "m/s";
    default:
      console.error("Fórmula não reconhecida.");
      return "";
  }
}

/ Função para tratar números com vírgula e garantir que sejam números válidos
function parseNumber(valor) {
  if (typeof valor === "string") {
    // Substituir vírgulas por pontos para tratar números no formato brasileiro
    valor = valor.replace(",", ".");
  }
  const numero = parseFloat(valor);
  return isNaN(numero) ? 0 : numero; // Se não for um número válido, retorna 0
}

// Funções de cálculo para Física
function calcularVelocidadeMedia(vars) {
  const [distancia, tempo] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return tempo !== 0 ? distancia / tempo : 0;
}

function calcularTrabalho(vars) {
  const [forca, distancia] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return forca * distancia;
}

function calcularForca(vars) {
  const [massa, aceleracao] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return massa * aceleracao;
}

function calcularEnergiaCinetica(vars) {
  const [massa, velocidade] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return 0.5 * massa * velocidade ** 2;
}

function calcularImpulso(vars) {
  const [forca, tempo] = vars.map((variavel) => parseNumber(variavel.valor));
  return forca * tempo;
}

function calcularPotencia(vars) {
  const [trabalho, tempo] = vars.map((variavel) => parseNumber(variavel.valor));
  return tempo !== 0 ? trabalho / tempo : 0;
}

function calcularAceleracao(vars) {
  const [vFinal, vInicial, tempo] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return tempo !== 0 ? (vFinal - vInicial) / tempo : 0;
}

function calcularMomentoLinear(vars) {
  const [massa, velocidade] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return massa * velocidade;
}

function calcularPressao(vars) {
  const [forca, area] = vars.map((variavel) => parseNumber(variavel.valor));
  return area !== 0 ? forca / area : 0;
}

function calcularFrequenciaOndas(vars) {
  const [velocidade, comprimento] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return comprimento !== 0 ? velocidade / comprimento : 0;
}

function calcularLeiHooke(vars) {
  const [constanteElastica, deformacao] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return constanteElastica * deformacao;
}

function calcularResistenciaEletrica(vars) {
  const [tensao, corrente] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return corrente !== 0 ? tensao / corrente : 0;
}

function calcularMovimentoUniforme(vars) {
  const [posInicial, velocidade, tempo] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return posInicial + velocidade * tempo;
}

function calcularMovimentoUniformementeVariado(vars) {
  const [posInicial, velInicial, aceleracao, tempo] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return posInicial + velInicial * tempo + 0.5 * aceleracao * tempo ** 2;
}

function calcularEnergiaMecanica(vars) {
  const [energiaPotencial, energiaCinetica] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return energiaPotencial + energiaCinetica;
}

function calcularLeiGravitacao(vars) {
  const [massa1, massa2, distancia] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  const G = 6.6743e-11; // Constante da gravitação universal em m³/kg/s²
  return distancia !== 0 ? (G * (massa1 * massa2)) / distancia ** 2 : 0;
}

function calcularEnergiaPotencialGravitacional(vars) {
  const [massa, gravidade, altura] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return massa * gravidade * altura;
}

function calcularEnergiaPotencialElastica(vars) {
  const [constanteElastica, deformacao] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return 0.5 * constanteElastica * deformacao ** 2;
}

function calcularCapacitancia(vars) {
  const [carga, tensao] = vars.map((variavel) => parseNumber(variavel.valor));
  return tensao !== 0 ? carga / tensao : 0;
}

const velocidadeLuz = 299792458; // m/s (constante)

function calcularEinsteinEnergia(vars) {
  const [massa] = vars.map((variavel) => parseNumber(variavel.valor));
  return massa * velocidadeLuz ** 2;
}

function calcularVelocidadeOnda(vars) {
  const [tensao, densidadeLinear] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return densidadeLinear !== 0 ? Math.sqrt(tensao / densidadeLinear) : 0;
}

// Funções para renderizar LaTeX
function renderLatex(latex) {
  // Verifica se MathJax já está carregado
  if (typeof MathJax === "undefined") {
    // Adiciona o script do MathJax 3 se não estiver presente
    const script = document.createElement("script");
    script.type = "text/javascript";
    script.src = "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js";
    script.async = true;
    document.head.appendChild(script);

    // Aguarda o carregamento do script e configuração
    script.onload = () => {
      renderFormula(latex);
    };
  } else {
    // Se o MathJax já está carregado, renderiza diretamente
    renderFormula(latex);
  }
}




------------
// Inicialização após o carregamento do DOM para Física
document.addEventListener("DOMContentLoaded", function () {
  const formulaFisica = document.getElementById("formula_fisica");

  if (formulaFisica) {
    // Adicionar listener para mudança de fórmula
    formulaFisica.addEventListener("change", updateVariablesFisica);
    console.log("Elemento formula_fisica encontrado e listener adicionado.");
  } else {
    console.error('Elemento com id "formula_fisica" não encontrado.');
  }

  // Adicionar MathJax para renderizar fórmulas LaTeX após o carregamento
  const script = document.createElement("script");
  script.src = "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"; // URL correta para o MathJax 3
  script.async = true;
  document.head.appendChild(script);

  script.onload = () => {
    console.log("MathJax carregado com sucesso.");
    // Configurar MathJax para renderizar fórmulas LaTeX
    window.MathJax = {
      tex: {
        inlineMath: [
          ["$", "$"],
          ["\\(", "\\)"],
        ],
        displayMath: [
          ["$$", "$$"],
          ["\\[", "\\]"],
        ],
      },
      svg: {
        fontCache: "global",
      },
    };

    // Reprocessa MathJax para garantir que as fórmulas LaTeX já existentes sejam renderizadas corretamente
    MathJax.typesetPromise()
      .then(() => {
        console.log("MathJax reprocessado com sucesso.");
      })
      .catch(function (err) {
        console.error("Erro ao processar fórmulas MathJax:", err);
      });
  };
});

function reprocessMathJax() {
  if (window.MathJax) {
    console.log("Reprocessando MathJax...");
    MathJax.typesetPromise()
      .then(() => {
        console.log(
          "MathJax reprocessado com sucesso dentro de reprocessMathJax."
        );
      })
      .catch(function (err) {
        console.error(
          "Erro ao reprocessar MathJax dentro de reprocessMathJax:",
          err
        );
      });
  } else {
    console.error("MathJax não foi carregado.");
  }
}
// Função para atualizar as variáveis e fórmulas com base na fórmula selecionada
function updateVariablesFisica() {
  const formula = document.getElementById("formula_fisica").value;
  const container = document.getElementById("variables-container_fisica");
  const formulaDisplay = document.getElementById("fisica-formula-display");

  // Limpar conteúdo anterior
  container.innerHTML = "";
  formulaDisplay.innerHTML = "";

  let variables = [];
  let formulaHtml = "";
  let unidades = [];

  // Definir variáveis e fórmulas com base na fórmula selecionada
  switch (formula) {
    case "velocidade":
      formulaHtml = "\\( v = \\frac{d}{t} \\)";
      variables = ["Distância", "Tempo"];
      unidades = ["m", "s"];
      break;
    case "trabalho":
      formulaHtml = "\\( T = F \\cdot d \\)";
      variables = ["Força", "Distância"];
      unidades = ["N", "m"];
      break;
    case "forca":
      formulaHtml = "\\( F = m \\cdot a \\)";
      variables = ["Massa", "Aceleração"];
      unidades = ["kg", "m/s²"];
      break;
    case "energia-cinetica":
      formulaHtml = "\\( E_c = \\frac{1}{2} \\cdot m \\cdot v^2 \\)";
      variables = ["Massa", "Velocidade"];
      unidades = ["kg", "m/s"];
      break;
    case "impulso":
      formulaHtml = "\\( I = F \\cdot t \\)";
      variables = ["Força", "Tempo"];
      unidades = ["N", "s"];
      break;
    case "potencia":
      formulaHtml = "\\( P = \\frac{T}{t} \\)";
      variables = ["Trabalho", "Tempo"];
      unidades = ["J", "s"];
      break;
    case "aceleracao":
      formulaHtml = "\\( a = \\frac{v_f - v_i}{t} \\)";
      variables = ["Velocidade final", "Velocidade inicial", "Tempo"];
      unidades = ["m/s", "m/s", "s"];
      break;
    case "momento-linear":
      formulaHtml = "\\( p = m \\cdot v \\)";
      variables = ["Massa", "Velocidade"];
      unidades = ["kg", "m/s"];
      break;
    case "pressao":
      formulaHtml = "\\( P = \\frac{F}{A} \\)";
      variables = ["Força", "Área"];
      unidades = ["N", "m²"];
      break;
    case "frequencia-ondas":
      formulaHtml = "\\( f = \\frac{v}{\\lambda} \\)";
      variables = ["Velocidade", "Comprimento de onda"];
      unidades = ["m/s", "m"];
      break;
    case "lei-hooke":
      formulaHtml = "\\( F = k \\cdot x \\)";
      variables = ["Constante Elástica", "Deformação"];
      unidades = ["N/m", "m"];
      break;
    case "resistencia-eletrica":
      formulaHtml = "\\( R = \\frac{V}{I} \\)";
      variables = ["Tensão", "Corrente"];
      unidades = ["V", "A"];
      break;
    default:
      formulaHtml = "Selecione uma fórmula válida";
  }

  // Atualiza a exibição da fórmula LaTeX
  formulaDisplay.innerHTML = `<strong>Fórmula:</strong> ${formulaHtml}`;

  // Gerar campos de entrada de variáveis e unidades
  container.innerHTML = variables
    .map(
      (variable, index) => `
      <div style="padding: 10px; border-bottom: 1px solid #ccc;">
        <label for="var${index}">${variable}</label>
        <input type="number" id="var${index}" placeholder="${variable}" step="any">
        <span>${unidades[index]}</span>
      </div>
    `
    )
    .join("");

  // Reprocessar MathJax para exibir a fórmula corretamente
  reprocessMathJax();
}

// Função para atualizar as variáveis com base na fórmula de Física selecionada
function updateVariablesFisica() {
  const formula = document.getElementById("formula_fisica").value;
  const container = document.getElementById("variables-container_fisica");
  const formulaDisplay = document.getElementById("fisica-formula-display");

  // Limpar conteúdo anterior
  container.innerHTML = "";
  formulaDisplay.innerHTML = "";

  let variables = [];
  let formulaHtml = "";
  let unidades = [];

  // Definir variáveis e fórmulas com base na fórmula selecionada
  switch (formula) {
    case "velocidade":
      formulaHtml = "\\( v = \\frac{d}{t} \\)";
      variables = ["Distância", "Tempo"];
      unidades = ["m", "s"];
      break;
    case "trabalho":
      formulaHtml = "\\( T = F \\cdot d \\)";
      variables = ["Força", "Distância"];
      unidades = ["N", "m"];
      break;
    case "forca":
      formulaHtml = "\\( F = m \\cdot a \\)";
      variables = ["Massa", "Aceleração"];
      unidades = ["kg", "m/s²"];
      break;
    case "energia-cinetica":
      formulaHtml = "\\( E_c = \\frac{1}{2} \\cdot m \\cdot v^2 \\)";
      variables = ["Massa", "Velocidade"];
      unidades = ["kg", "m/s"];
      break;
    case "impulso":
      formulaHtml = "\\( I = F \\cdot t \\)";
      variables = ["Força", "Tempo"];
      unidades = ["N", "s"];
      break;
    case "potencia":
      formulaHtml = "\\( P = \\frac{T}{t} \\)";
      variables = ["Trabalho", "Tempo"];
      unidades = ["J", "s"];
      break;
    case "aceleracao":
      formulaHtml = "\\( a = \\frac{v_f - v_i}{t} \\)";
      variables = ["Velocidade final", "Velocidade inicial", "Tempo"];
      unidades = ["m/s", "m/s", "s"];
      break;
    case "momento-linear":
      formulaHtml = "\\( p = m \\cdot v \\)";
      variables = ["Massa", "Velocidade"];
      unidades = ["kg", "m/s"];
      break;
    case "pressao":
      formulaHtml = "\\( P = \\frac{F}{A} \\)";
      variables = ["Força", "Área"];
      unidades = ["N", "m²"];
      break;
    case "frequencia-ondas":
      formulaHtml = "\\( f = \\frac{v}{\\lambda} \\)";
      variables = ["Velocidade", "Comprimento de onda"];
      unidades = ["m/s", "m"];
      break;
    case "lei-hooke":
      formulaHtml = "\\( F = k \\cdot x \\)";
      variables = ["Constante Elástica", "Deformação"];
      unidades = ["N/m", "m"];
      break;
    case "resistencia-eletrica":
      formulaHtml = "\\( R = \\frac{V}{I} \\)";
      variables = ["Tensão", "Corrente"];
      unidades = ["V", "A"];
      break;
    default:
      formulaHtml = "Selecione uma fórmula válida";
      variables = [];
      unidades = [];
  }

  // Atualiza a exibição da fórmula LaTeX
  formulaDisplay.innerHTML = `<strong>Fórmula:</strong> ${formulaHtml}`;

  // Verifica se foi selecionada uma fórmula válida
  if (variables.length === 0) {
    container.innerHTML =
      "<p>Por favor, selecione uma fórmula para continuar.</p>";
    return;
  }

  // Gerar campos de entrada de variáveis e unidades
  container.innerHTML = variables
    .map(
      (variable, index) =>
        `<div style="padding: 10px; border-bottom: 1px solid #ccc; display: flex; align-items: center;">
            <label for="var${index}" style="flex: 1;">${variable}</label>
            <input type="number" id="var${index}" placeholder="${variable}" step="any" style="flex: 2; margin-right: 10px;">
            <span style="flex: 0.5;">${unidades[index]}</span>
        </div>`
    )
    .join("");

  // Reprocessar MathJax para exibir a fórmula corretamente
  if (window.MathJax) {
    console.log("Reprocessando MathJax para exibir a fórmula...");
    MathJax.typesetPromise().catch(function (err) {
      console.error("Erro ao renderizar MathJax:", err);
    });
  } else {
    console.error("MathJax não foi carregado corretamente.");
  }
}

// Função para obter as unidades para cada variável
function getUnidades(variable) {
  switch (variable) {
    case "Distância":
      return `
        <option value="m">m</option>
        <option value="cm">cm</option>
        <option value="dm">dm</option>
        <option value="mm">mm</option>
        <option value="km">km</option>
        <option value="mi">milha</option>
        <option value="in">polegada</option>
        <option value="ft">pé</option>
        <option value="yd">jarda</option>
      `;
    case "Tempo":
      return `
        <option value="s">s</option>
        <option value="min">min</option>
        <option value="h">h</option>
        <option value="d">dia</option>
        <option value="ms">ms</option>
        <option value="μs">μs</option>
        <option value="ns">ns</option>
      `;
    case "Força":
      return `
        <option value="N">N</option>
        <option value="kN">kN</option>
        <option value="mN">mN</option>
        <option value="μN">μN</option>
        <option value="lbf">lbf</option>
        <option value="ozf">ozf</option>
      `;
    case "Massa":
      return `
        <option value="kg">kg</option>
        <option value="g">g</option>
        <option value="mg">mg</option>
        <option value="μg">μg</option>
        <option value="lb">libra</option>
        <option value="oz">onça</option>
      `;
    case "Aceleração":
      return `
        <option value="m/s²">m/s²</option>
        <option value="cm/s²">cm/s²</option>
        <option value="dm/s²">dm/s²</option>
        <option value="mm/s²">mm/s²</option>
        <option value="g">g</option>
      `;
    case "Trabalho":
    case "Energia":
      return `
        <option value="J">J</option>
        <option value="kJ">kJ</option>
        <option value="mJ">mJ</option>
        <option value="μJ">μJ</option>
        <option value="cal">cal</option>
        <option value="kcal">kcal</option>
      `;
    case "Potência":
      return `
        <option value="W">W</option>
        <option value="kW">kW</option>
        <option value="mW">mW</option>
        <option value="μW">μW</option>
        <option value="hp">hp</option>
      `;
    case "Pressão":
      return `
        <option value="Pa">Pa</option>
        <option value="kPa">kPa</option>
        <option value="mPa">mPa</option>
        <option value="μPa">μPa</option>
        <option value="atm">atm</option>
        <option value="bar">bar</option>
      `;
    case "Frequência":
      return `
        <option value="Hz">Hz</option>
        <option value="kHz">kHz</option>
        <option value="MHz">MHz</option>
        <option value="GHz">GHz</option>
      `;
    case "Velocidade":
      return `
        <option value="m/s">m/s</option>
        <option value="km/h">km/h</option>
        <option value="mph">mph</option>
        <option value="ft/s">ft/s</option>
      `;
    case "Comprimento de onda":
      return `
        <option value="m">m</option>
        <option value="cm">cm</option>
        <option value="nm">nm</option>
        <option value="µm">µm</option>
      `;
    case "Tensão":
      return `
        <option value="V">V</option>
        <option value="kV">kV</option>
        <option value="mV">mV</option>
        <option value="μV">μV</option>
      `;
    case "Corrente":
      return `
        <option value="A">A</option>
        <option value="mA">mA</option>
        <option value="μA">μA</option>
      `;
    case "Área":
      return `
        <option value="m²">m²</option>
        <option value="cm²">cm²</option>
        <option value="km²">km²</option>
        <option value="ft²">ft²</option>
        <option value="in²">in²</option>
      `;
    case "Deformação":
      return `
        <option value="m">m</option>
        <option value="cm">cm</option>
        <option value="mm">mm</option>
      `;
    case "Carga":
      return `
        <option value="C">C</option>
        <option value="mC">mC</option>
        <option value="μC">μC</option>
        <option value="nC">nC</option>
      `;
    case "Constante Elástica":
      return `
        <option value="N/m">N/m</option>
      `;
    default:
      return `<option value="">Selecione uma unidade</option>`;
  }
}

// Função de cálculo para Física
function calcularFisica() {
  const formula = document.getElementById("formula_fisica").value;
  const container = document.getElementById("variables-container_fisica");
  const inputs = container.querySelectorAll("input");
  const unidades = container.querySelectorAll("select");

  // Obter os valores e unidades das variáveis
  const variables = Array.from(inputs).map((input, index) => {
    const unidade = unidades[index].value;
    const valor = parseFloat(input.value.trim());
    if (isNaN(valor)) {
      console.error(`Valor inválido para a variável na posição ${index}.`);
      return { valor: 0, unidade };
    }
    return { valor, unidade };
  });

  // Converter unidades para Sistema Internacional (SI)
  variables.forEach((variable, index) => {
    variables[index].valor = converterParaSI(variable.valor, variable.unidade);
  });

  

  let resultado;
  switch (formula) {
    case "velocidade":
      resultado = calcularVelocidadeMedia(variables);
      break;
    case "trabalho":
      resultado = calcularTrabalho(variables);
      break;
    case "forca":
      resultado = calcularForca(variables);
      break;
    case "energia-cinetica":
      resultado = calcularEnergiaCinetica(variables);
      break;
    case "impulso":
      resultado = calcularImpulso(variables);
      break;
    case "potencia":
      resultado = calcularPotencia(variables);
      break;
    case "aceleracao":
      resultado = calcularAceleracao(variables);
      break;
    case "momento-linear":
      resultado = calcularMomentoLinear(variables);
      break;
    case "pressao":
      resultado = calcularPressao(variables);
      break;
    case "frequencia-ondas":
      resultado = calcularFrequenciaOndas(variables);
      break;
    case "lei-hooke":
      resultado = calcularLeiHooke(variables);
      break;
    case "resistencia-eletrica":
      resultado = calcularResistenciaEletrica(variables);
      break;
    case "movimento-uniforme":
      resultado = calcularMovimentoUniforme(variables);
      break;
    case "movimento-uniformemente-variado":
      resultado = calcularMovimentoUniformementeVariado(variables);
      break;
    case "energia-mecanica":
      resultado = calcularEnergiaMecanica(variables);
      break;
    case "lei-gravitacao":
      resultado = calcularLeiGravitacao(variables);
      break;
    case "energia-potencial-gravitacional":
      resultado = calcularEnergiaPotencialGravitacional(variables);
      break;
    case "energia-potencial-elastica":
      resultado = calcularEnergiaPotencialElastica(variables);
      break;
    case "capacitancia":
      resultado = calcularCapacitancia(variables);
      break;
    case "einstein-energia":
      resultado = calcularEinsteinEnergia(variables);
      break;
    case "velocidade-onda":
      resultado = calcularVelocidadeOnda(variables);
      break;
    default:
      console.error("Fórmula não reconhecida.");
      return;
  }

  // Exibir resultado com unidade de medida correta
  if (isNaN(resultado) || resultado === Infinity || resultado === -Infinity) {
    resultado = 0; // Definir resultado inválido como 0
  }

  const resultadoHtml = `Resultado: <span id="resultado-valor-fisica">${resultado.toFixed(2)}</span>`;
  document.getElementById("resultado-fisica").innerHTML = resultadoHtml;
}
// Função auxiliar para converter valores para Sistema Internacional (SI)
function converterParaSI(valor, unidade) {
  const conversao = {
    // Comprimento
    cm: 0.01,
    dm: 0.1,
    mm: 0.001,
    km: 1000,
    mi: 1609.34,
    in: 0.0254,
    ft: 0.3048,
    yd: 0.9144,
    // Tempo
    min: 60,
    h: 3600,
    d: 86400,
    ms: 0.001,
    μs: 0.000001,
    ns: 0.000000001,
    // Força
    kN: 1000,
    mN: 0.001,
    μN: 0.000001,
    lbf: 4.44822,
    ozf: 0.2780139,
    // Massa
    g: 0.001,
    mg: 0.000001,
    μg: 0.000000001,
    lb: 0.453592,
    oz: 0.0283495,
    // Energia
    kJ: 1000,
    mJ: 0.001,
    μJ: 0.000001,
    cal: 4.184,
    kcal: 4184,
    // Potência
    kW: 1000,
    mW: 0.001,
    μW: 0.000001,
    hp: 745.7,
    // Pressão
    kPa: 1000,
    mPa: 0.001,
    μPa: 0.000001,
    atm: 101325,
    bar: 100000,
    // Frequência
    kHz: 1000,
    MHz: 1000000,
    GHz: 1000000000,
    // Velocidade
    "km/h": 0.277778,
    mph: 0.44704,
    "ft/s": 0.3048,
    // Comprimento de onda
    nm: 0.000000001,
    µm: 0.000001,
    // Tensão
    kV: 1000,
    mV: 0.001,
    μV: 0.000001,
    // Corrente
    mA: 0.001,
    μA: 0.000001,
    // Área
    "cm²": 0.0001,
    "km²": 1000000,
    "ft²": 0.092903,
    "in²": 0.00064516,
  };

  return conversao[unidade] ? valor * conversao[unidade] : valor;
}

// Função para obter a unidade de medida correta
function getUnidadeResultado(formula) {
  const unidades = {
    velocidade: "m/s",
    trabalho: "J",
    forca: "N",
    "energia-cinetica": "J",
    impulso: "N·s",
    potencia: "W",
    aceleracao: "m/s²",
    "momento-linear": "kg·m/s",
    pressao: "Pa",
    "frequencia-ondas": "Hz",
    "lei-hooke": "N",
    "resistencia-eletrica": "Ω",
    "movimento-uniforme": "m",
    "movimento-uniformemente-variado": "m",
    "energia-mecanica": "J",
    "lei-gravitacao": "N",
    "energia-potencial-gravitacional": "J",
    "energia-potencial-elastica": "J",
    capacitancia: "F",
    "einstein-energia": "J",
    "velocidade-onda": "m/s",
    tensao: "V",
    corrente: "A",
    "carga-eletrica": "C",
    densidade: "kg/m³",
    "calor-sensivel": "J",
    "calor-latente": "J/kg",
    "comprimento-de-onda": "m",
    "potencial-eletrico": "V",
    "fluxo-magnetico": "Wb",
    indutancia: "H",
  };

  return unidades[formula] || ""; // Retorna a unidade ou uma string vazia se não for encontrada
}

// Função para tratar números com vírgula e garantir que sejam números válidos
function parseNumber(valor) {
  if (typeof valor === "string") {
    // Substituir vírgulas por pontos para tratar números no formato brasileiro
    valor = valor.replace(",", ".");
  }
  const numero = parseFloat(valor);
  return isNaN(numero) ? 0 : numero; // Se não for um número válido, retorna 0
}

// Funções de cálculo para Física
function calcularVelocidadeMedia(vars) {
  const [distancia, tempo] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return tempo !== 0 ? distancia / tempo : 0;
}

function calcularTrabalho(vars) {
  const [forca, distancia] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return forca * distancia;
}

function calcularForca(vars) {
  const [massa, aceleracao] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return massa * aceleracao;
}

function calcularEnergiaCinetica(vars) {
  const [massa, velocidade] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return 0.5 * massa * velocidade ** 2;
}

function calcularImpulso(vars) {
  const [forca, tempo] = vars.map((variavel) => parseNumber(variavel.valor));
  return forca * tempo;
}

function calcularPotencia(vars) {
  const [trabalho, tempo] = vars.map((variavel) => parseNumber(variavel.valor));
  return tempo !== 0 ? trabalho / tempo : 0;
}

function calcularAceleracao(vars) {
  const [vFinal, vInicial, tempo] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return tempo !== 0 ? (vFinal - vInicial) / tempo : 0;
}

function calcularMomentoLinear(vars) {
  const [massa, velocidade] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return massa * velocidade;
}

function calcularPressao(vars) {
  const [forca, area] = vars.map((variavel) => parseNumber(variavel.valor));
  return area !== 0 ? forca / area : 0;
}

function calcularFrequenciaOndas(vars) {
  const [velocidade, comprimento] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return comprimento !== 0 ? velocidade / comprimento : 0;
}

function calcularLeiHooke(vars) {
  const [constanteElastica, deformacao] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return constanteElastica * deformacao;
}

function calcularResistenciaEletrica(vars) {
  const [tensao, corrente] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return corrente !== 0 ? tensao / corrente : 0;
}

function calcularMovimentoUniforme(vars) {
  const [posInicial, velocidade, tempo] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return posInicial + velocidade * tempo;
}

function calcularMovimentoUniformementeVariado(vars) {
  const [posInicial, velInicial, aceleracao, tempo] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return posInicial + velInicial * tempo + 0.5 * aceleracao * tempo ** 2;
}

function calcularEnergiaMecanica(vars) {
  const [energiaPotencial, energiaCinetica] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return energiaPotencial + energiaCinetica;
}

function calcularLeiGravitacao(vars) {
  const [massa1, massa2, distancia] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  const G = 6.6743e-11; // Constante da gravitação universal em m³/kg/s²
  return distancia !== 0 ? (G * (massa1 * massa2)) / distancia ** 2 : 0;
}

function calcularEnergiaPotencialGravitacional(vars) {
  const [massa, gravidade, altura] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return massa * gravidade * altura;
}

function calcularEnergiaPotencialElastica(vars) {
  const [constanteElastica, deformacao] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return 0.5 * constanteElastica * deformacao ** 2;
}

function calcularCapacitancia(vars) {
  const [carga, tensao] = vars.map((variavel) => parseNumber(variavel.valor));
  return tensao !== 0 ? carga / tensao : 0;
}

const velocidadeLuz = 299792458; // m/s (constante)

function calcularEinsteinEnergia(vars) {
  const [massa] = vars.map((variavel) => parseNumber(variavel.valor));
  return massa * velocidadeLuz ** 2;
}

function calcularVelocidadeOnda(vars) {
  const [tensao, densidadeLinear] = vars.map((variavel) =>
    parseNumber(variavel.valor)
  );
  return densidadeLinear !== 0 ? Math.sqrt(tensao / densidadeLinear) : 0;
}

// Funções para renderizar LaTeX
function renderLatex(latex) {
  // Verifica se MathJax já está carregado
  if (typeof MathJax === "undefined") {
    // Adiciona o script do MathJax 3 se não estiver presente
    const script = document.createElement("script");
    script.type = "text/javascript";
    script.src = "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js";
    script.async = true;
    document.head.appendChild(script);

    // Aguarda o carregamento do script e configuração
    script.onload = () => {
      renderFormula(latex);
    };
  } else {
    // Se o MathJax já está carregado, renderiza diretamente
    renderFormula(latex);
  }
}
